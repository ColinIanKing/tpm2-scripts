#! /usr/bin/env python
# Copyright (c) 2015, Intel Corporation
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Intel Corporation nor the names of its contributors
#       may be used to endorse or promote products derived from this software
#       without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

from argparse import ArgumentParser
from argparse import FileType
import os
import sys
import tpm2


def create_policy(session_handle, pcrs, bank_alg, name_alg):
    if pcrs:
        tpm2.policy_pcr(session_handle, pcrs, bank_alg, name_alg)

    tpm2.policy_password(session_handle)


def main():
    parser = ArgumentParser(description='Create a storage root key')
    parser.add_argument('--debug',
                        action='store_true',
                        help='dump TPM commands and replies')
    parser.add_argument('--trial',
                        action='store_true',
                        help='a trial policy')
    parser.add_argument('--pcr', dest='pcr', metavar='PCR', action='append',
                        type=int, help='PCR index')
    parser.add_argument('--name-alg', dest='name_alg', metavar='NAMEALG',
                        help='Hash algorithm used for the policy session',
                        type=tpm2.get_algorithm, default='sha1')
    parser.add_argument('--bank', dest='bank', metavar='BANK',
                        help='PCR bank', type=tpm2.get_algorithm,
                        default='sha1')
    args = parser.parse_args()

    tpm2.debug = args.debug

    try:
        if args.trial:
            session_handle = tpm2.start_auth_session(tpm2.TPM2_SE_TRIAL,
                                                     args.name_alg)
            try:
                create_policy(session_handle, args.pcr, args.bank,
                              args.name_alg)
                policy_dig = tpm2.get_policy_digest(session_handle)
            finally:
                tpm2.flush_context(session_handle)

            print(policy_dig.encode('hex'))
        else:
            session_handle = tpm2.start_auth_session(tpm2.TPM2_SE_POLICY,
                                                     args.name_alg)
            try:
                create_policy(session_handle, args.pcr, args.bank,
                              args.name_alg)
            except:
                tpm2.flush_context(session_handle)
                raise

            print(format(session_handle, '#010x'))
    except tpm2.ProtocolError, e:
        sys.stderr.write(str(e) + os.linesep)
        sys.exit(1)


if __name__ == '__main__':
    main()
